// Generated by LiveScript 1.6.0
(function(){
  var wn, easysoap, debug, sign, Gateway;
  wn = require('when');
  easysoap = require('easysoap');
  debug = require('debug');
  sign = require('./sign');
  module.exports = Gateway = (function(){
    Gateway.displayName = 'Gateway';
    var prototype = Gateway.prototype, constructor = Gateway;
    function Gateway(config){
      var params;
      this.username = config.username;
      this.password = config.password;
      this.pemKeyAddress = config.pemKeyAddress;
      params = {
        host: 'pna.shaparak.ir',
        path: '/ref-payment2/jax/merchantService?wsdl',
        wsdl: '/ref-payment2/jax/merchantService?wsdl'
      };
      this.soapClient = easysoap.createClient(params, {
        secure: true
      });
    }
    Gateway.prototype._login = function(){
      var query, this$ = this;
      query = {
        method: 'MerchantLogin',
        params: {
          param: {
            UserName: this.username,
            Password: this.password
          }
        }
      };
      return this.soapClient.call(query).then(function(result){
        var ref$, ref1$, ref2$, ref3$, sessionId, wsContext, ref4$, ref5$, ref6$, ref7$;
        if ((result != null ? (ref$ = result.data) != null ? (ref1$ = ref$.MerchantLoginResponse) != null ? (ref2$ = ref1$['return']) != null ? (ref3$ = ref2$[0]) != null ? ref3$.Result : void 8 : void 8 : void 8 : void 8 : void 8) === "erSucceed") {
          sessionId = result.data.MerchantLoginResponse['return'][1].SessionId;
          wsContext = {
            SessionId: sessionId,
            UserId: this$.username,
            Password: this$.password
          };
          return wsContext;
        } else {
          return wn.reject({
            reason: "Payment[Login]: Bad response from bank's while logging-in",
            response: result != null ? (ref4$ = result.data) != null ? (ref5$ = ref4$.MerchantLoginResponse) != null ? (ref6$ = ref5$['return']) != null ? (ref7$ = ref6$[0]) != null ? ref7$.Result : void 8 : void 8 : void 8 : void 8 : void 8
          });
        }
      })['catch'](function(err){
        return wn.reject({
          message: "Payment[Login]: Cannot login to bank using `MerchantLogin` method",
          err: err
        });
      });
    };
    Gateway.prototype._getCertificate = function(wsContext, invoiceNumber, amount, returnPage, mobile, email){
      var query;
      query = {
        method: 'GenerateTransactionDataToSign',
        params: {
          param: {
            ReserveNum: invoiceNumber,
            Amount: amount,
            AmountSpecified: true,
            RedirectUrl: returnPage,
            TransType: 'enGoods',
            WSContext: wsContext
          }
        }
      };
      debug('Payment[getCertificate]: calling GenerateTransactionDataToSign with params: ', query.params.param);
      if (mobile != null) {
        query.params.param.MobileNo = mobile;
      }
      if (email != null) {
        query.params.param.Email = email;
      }
      return this.soapClient.call(query).then(function(result){
        var ref$, ref1$, ref2$, ref3$, dataToSign, uniqueId, reason, ref4$, ref5$, ref6$;
        if ((result != null ? (ref$ = result.data) != null ? (ref1$ = ref$.GenerateTransactionDataToSignResponse) != null ? (ref2$ = ref1$['return']) != null ? (ref3$ = ref2$[0]) != null ? ref3$.Result : void 8 : void 8 : void 8 : void 8 : void 8) === "erSucceed") {
          dataToSign = result.data.GenerateTransactionDataToSignResponse['return'][1].DataToSign;
          uniqueId = result.data.GenerateTransactionDataToSignResponse['return'][2].UniqueId;
          return {
            dataToSign: dataToSign,
            uniqueId: uniqueId
          };
        } else {
          reason = "Payment[getCertificate]: Bad response from bank's TransactionDataToSign API";
          return wn.reject({
            reason: reason,
            response: result != null ? (ref4$ = result.data) != null ? (ref5$ = ref4$.GenerateTransactionDataToSignResponse) != null ? (ref6$ = ref5$['return']) != null ? ref6$.Result : void 8 : void 8 : void 8 : void 8
          });
        }
      })['catch'](function(err){
        var message;
        message = "Payment[getCertificate]: Calling GenerateTransactionDataToSign failed";
        return wn.reject({
          message: message,
          err: err
        });
      });
    };
    Gateway.prototype._getToken = function(wsContext, UniqueId, Signature){
      var query;
      query = {
        method: 'GenerateSignedDataToken',
        params: {
          param: {
            UniqueId: UniqueId,
            Signature: Signature,
            WSContext: wsContext
          }
        }
      };
      return this.soapClient.call(query).then(function(result){
        var ref$, ref1$, ref2$, ref3$, expirationDate, token, ref4$, ref5$, ref6$;
        if ((result != null ? (ref$ = result.data) != null ? (ref1$ = ref$.GenerateSignedDataTokenResponse) != null ? (ref2$ = ref1$['return']) != null ? (ref3$ = ref2$[0]) != null ? ref3$.Result : void 8 : void 8 : void 8 : void 8 : void 8) === "erSucceed") {
          expirationDate = result.data.GenerateSignedDataTokenResponse['return'][1].ExpirationDate;
          token = result.data.GenerateSignedDataTokenResponse['return'][2].Token;
          return {
            expirationDate: expirationDate,
            token: token
          };
        } else {
          return wn.reject({
            reason: "Payment[getToken]: Bad response from bank's GenerateSignedDataToken API",
            response: result != null ? (ref4$ = result.data) != null ? (ref5$ = ref4$.GenerateSignedDataTokenResponse) != null ? (ref6$ = ref5$['return']) != null ? ref6$.Result : void 8 : void 8 : void 8 : void 8
          });
        }
      })['catch'](function(err){
        return wn.reject({
          message: "Payment[getToken]: Calling GenerateSignedDataToken failed",
          err: err
        });
      });
    };
    Gateway.prototype._verifyPayment = function(wsContext, Token, RefNum){
      var query;
      query = {
        method: 'VerifyMerchantTrans',
        params: {
          param: {
            RefNum: RefNum,
            Token: Token,
            WSContext: wsContext
          }
        }
      };
      return this.soapClient.call(query).then(function(result){
        var ref$, ref1$, ref2$, ref3$, amount, referenceNumber, ref4$, ref5$, ref6$;
        if ((result != null ? (ref$ = result.data) != null ? (ref1$ = ref$.VerifyMerchantTransResponse) != null ? (ref2$ = ref1$['return']) != null ? (ref3$ = ref2$[0]) != null ? ref3$.Result : void 8 : void 8 : void 8 : void 8 : void 8) === "erSucceed") {
          amount = result.data.VerifyMerchantTransResponse['return'][1].Amount;
          referenceNumber = result.data.VerifyMerchantTransResponse['return'][2].RefNum;
          return {
            amount: amount,
            referenceNumber: referenceNumber
          };
        } else {
          return wn.reject({
            message: "Payment[getToken]: Bad response from bank's VerifyMerchantTrans API",
            response: result != null ? (ref4$ = result.data) != null ? (ref5$ = ref4$.VerifyMerchantTransResponse) != null ? (ref6$ = ref5$['return']) != null ? ref6$.Result : void 8 : void 8 : void 8 : void 8
          });
        }
      })['catch'](function(err){
        return wn.reject({
          message: "Payment[getToken]: Calling VerifyMerchantTrans failed",
          err: err
        });
      });
    };
    Gateway.prototype.requestPaymentToken = function(amount, invoiceNumber, returnPage, mobile, email){
      var this$ = this;
      return this._login().then(function(wsContext){
        debug('Payment[requestToken]: login was successfull');
        return this$._getCertificate(wsContext, invoiceNumber, amount, returnPage, mobile, email).then(function(arg$){
          var uniqueId, dataToSign;
          uniqueId = arg$.uniqueId, dataToSign = arg$.dataToSign;
          debug('Payment[requestToken]: getting certificate was successfull');
          return sign(dataToSign, this$.pemKeyAddress).then(function(signature){
            debug('Payment[requestToken]: signing token was successfull');
            return this$._getToken(wsContext, uniqueId, signature);
          });
        });
      });
    };
    Gateway.prototype.recievePay = function(token, refNumber){
      var this$ = this;
      return this._login().then(function(wsContext){
        return this$._verifyPayment(wsContext, token, refNumber);
      });
    };
    return Gateway;
  }());
}).call(this);
